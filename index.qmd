---
title: "Exploring Artificial Intelligence and Programming: A Comprehensive Analysis of Developer Perspectives"
author: "Clara Hoey, Daizy Buluma, Christian Manzi"
date: "8 Nov. 2023"
format:
  html:
    theme: minty
    toc: true
---

```{r}
#| label: setup
#| include: false

# Set code chunk defaults 
# Consider adding `message = FALSE` option
knitr::opts_chunk$set(echo = FALSE) 
                      
# Set R environment options
options(knitr.kable.NA = '')

# Load packages
library(tidyverse)
library(readr)
library(tidytext)
library(textdata)
library(wordcloud)
```

# Intro

In the world of coding, things are shaking up with the rise of artificial intelligence (AI) tools. From those just getting the hang of coding to the pros handling big projects, everyone's got a different take on AI. In this blog project, we're digging into the real thoughts of programmers at different career stages. We look into their honest insights about how AI tools are fitting into their coding lives. 

## Website publication work flow

1. Edit qmd

2. Knit to HTML to view progress. You may need to click "Open in Browser" for some content to show (sometimes content won't show until you actually push your changes to GitHub and view the published website).

3. Commit and push changes when you are ready. The website may take a couple minutes to update automatically after the push, but you may need to clear your browser's cache or view the page in a private/incognito window to see the changes more quickly. 


# Content

You can include text, `code`, and output as usual. Remember to take full advantage of Markdown and its [syntax shortcuts](https://www.markdownguide.org/basic-syntax/).

```{r,show_col_types = FALSE}
#| label: ggplot-example
#| fig.align: left
#| out.width: 100%

data <- read_csv("data/survey_results_public.csv")

fdata <- data %>% filter(
  Country == "United States of America",
  SOVisitFreq == "Daily or almost daily"
)

#glimpse(data)

saveRDS(data, "survey_results.rds")

#head(data$SOAI)

df <- data |>
  select(ResponseId, SOAI, YearsCode, Age)



saveRDS(df, "data/ID_SOAI_responses.rds")


#################
# TEXT ANALYSIS #
#################

soai_res <- read_rds("data/ID_SOAI_responses.rds")


soai_data <- soai_res |>
  unnest_tokens(output = word, input = SOAI) |>
  # unnest_tokes(input = SOAI, output = bigram, token = "ngrams", n = 3)
  filter(!is.na(word))

#head(soai_data)

#head(stop_words) 

non_stop_words <- c("necessary", "don't", "awfully", "appropriate", "wouldn't") # add more

more_stop_words <- c("stack", "overflow", "ai", "stackoverflow", "questions", "answers", "users")

# filter stop_words to keep some words

filtered_stop_words <- stop_words |>
  filter(!word %in% non_stop_words)

# words in soai_data before filtering for stop_words
#count(soai_data) # 849,989

soai_no_stopwords <- soai_data |>
  anti_join(filtered_stop_words, by = "word") |>
  filter(! word %in% more_stop_words)

#count(soai_no_stopwords) # 345,877

removed_words <- soai_data |>
  anti_join(soai_no_stopwords, by = "word") |>
  count(word) |>
  arrange(word)

#removed_words # 659 words

# PLOT FREQUENT WORDS

soai_no_stopwords |>
    count(word, sort = TRUE) |>
    slice(1:20) |>
    # fct_reorder is used to re-order the axis (displaying the word)
    # by values of n (the number of times that word was used)
    ggplot(aes(x = fct_reorder(word, n), y = n, color = word, fill = word)) +
    geom_col() +
    # Rotate graph
    coord_flip() +
    guides(color = "none",
           fill = "none") +
    labs(
      # Remove x variable label; notice that although coordinates are flipped,
      # the labels correspond to which variables were specified
      # as `x` and `y` in `aes()`
      x = NULL,
      y = "Number of instances",
      title = "The most common words in developers responses on AI")

soai_word_freqs <- soai_no_stopwords |>
  select(word) |>
  count(word)

# WORDCLOUD WITH FREQUENT WORDS

# Word cloud 
  set.seed(1)
  # Create word cloud using tidyverse
  soai_word_freqs |>
    with(wordcloud(words = word,
                   freq = n,
                   min.freq = 1000,
                   max.words = 50))
  
# PLOT OVERALL RESPONSES SENTIMENT SCORE  

afinn_lexicon <- get_sentiments("afinn")

# using afinn lexicon
soai_afinn <- soai_no_stopwords |>
  inner_join(afinn_lexicon, by = "word") |>
  group_by(ResponseId) |>
  summarize(total_score_per_response = sum(value))

ggplot(data = soai_afinn, aes(x = total_score_per_response)) +
  geom_density(color="#AF7AC5", fill="#AF7AC5", alpha = 0.5) +
  theme_classic() +
  labs(title = "Total Response Score based on AFINN Lexicon", x = "Response Score")

```

Examples and additional guidance are provided below. 

Take note of the the default code chunk options in the `setup` code chunk. For example, unlike the rest of the qmd files we worked in this semester, the default code chunk option is `echo = FALSE`, so you will need to set `echo  = TRUE` for any code chunks you would like to display in the blog. You should be thoughtful and intentional about the code you choose to display. 


## Links 

You can include [links](https://www.datadreaming.org/post/r-markdown-theme-gallery/) using Markdown syntax as shown. 

You should include links to relevant sites as you write. You should additionally include a list of references as the end of your blog with full citations (and relevant links).


## Visualizations 

Visualizations, particularly interactive ones, will be well-received. That said, do not overuse visualizations. You may be better off with one complicated but well-crafted visualization as opposed to many quick-and-dirty plots. Any plots should be well-thought-out, properly labeled, informative, and visually appealing.

If you want to include dynamic visualizations or tables, you should explore your options from packages that are built from [**htmlwidgets**](https://www.htmlwidgets.org/showcase_leaflet.html). These **htmlwidgets**-based packages offer ways to build lighterweight, dynamic visualizations or tables that don't require an R server to run! A more complete list of packages is available on the linked website, but a short list includes:

* [**plotly**](https://plot.ly/r/): Interactive graphics with D3
* [**leaflet**](https://rstudio.github.io/leaflet/): Interactive maps with OpenStreetMap
* [**dygraphs**](http://rstudio.github.io/dygraphs): Interactive time series visualization
* [**visNetwork**](http://dataknowledge.github.io/visNetwork): Network graph visualization vis.js
* [**sparkline**](https://github.com/htmlwidgets/sparkline): Small inline charts
* [**threejs**](https://github.com/bwlewis/rthreejs): Interactive 3D graphics
    
You may embed a published Shiny app in your blog if useful, but be aware that there is a limited window size for embedded objects, which tends to makes the user experience of the app worse relative to a dedicated Shiny app page. Additionally, Shiny apps will go idle after a few minutes and have to be reloaded by the user, which may also affect the user experience. 

Any Shiny apps embedded in your blog should be accompanied by the link to the published Shiny app (I did this using a figure caption in the code chunk below, but you don't have to incorporate the link in this way).

```{r}
#| label: ds-salaries-app
#| out.width: "100%"

knitr::include_app("https://bebailey.shinyapps.io/data-science-salaries",
                   height = "500px")
```


## Tables

### **DT** package

The [**DT** package](https://rstudio.github.io/DT/) is great for making dynamic tables that can be displayed, searched, and filtered by the user without needing an R server or Shiny app!

Note: you should load any packages you use in the `setup` code chunk as usual. The `library()` functions are shown below just for demonstration.

```{r}
#| label: dt-example
#| message: false
#| echo: true

library(DT)
mtcars |>
  select(mpg, cyl, hp) |>
  datatable(colnames = c("MPG", "Number of cylinders", "Horsepower"),
            filter = 'top',
            options = list(pageLength = 10, autoWidth = TRUE))
```

### **kableExtra** package

You can also use [**kableExtra**](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) for customizing HTML tables.

```{r}
#| label: kable-example
#| echo: true
#| message: false

library(kableExtra)
summary(cars) |>
  kbl(col.names = c("Speed", "Distance"), row.names = FALSE) |>
  kable_styling(bootstrap_options = "striped", full_width = FALSE) |>
  row_spec(0, bold = TRUE) |>
  column_spec(1:2, width = "1.5in") 
```


## Images

Images and gifs can be displayed using code chunks:

```{r}
#| fig.cap: '"Safe Space" by artist Kenesha Sneed'
#| out.width: 80%
#| fig.align: center

knitr::include_graphics("img/Kenesha-Sneed_safe-space.jpeg")
```


```{r}
#| fig.cap: "This is a figure caption"
#| out.width: 50%
#| fig.align: center
knitr::include_graphics("https://media.giphy.com/media/H7ZrrA9V2pd3Tehdds/giphy.gif")
```

You may also use Markdown syntax for displaying images as shown below, but code chunks offer easier customization of the image size and alignment.

![This is another figure caption](https://media.giphy.com/media/8i5IvxP9ZLgmjXN1BF/giphy.gif)

Either way, the file path can be a local path within your project directory or a URL for an image hosted online. This syntax works for PNG, PDF, JPG, and even GIF formats.


## Equations

You might include equations if part of the purpose of your blog is to explain a statistical method. There are two ways to include equations:

* Inline: $b \sim N(0, \sigma^2_b)$
* Display-style (displayed on its own line): 
$$\frac{\sigma^2_b}{\sigma^2_b + \sigma^2_e}$$

For typesetting equations appropriately, check out the [AMS-LaTeX quick reference](https://github.com/manuelemacchia/math-latex/blob/master/amsmath.pdf) or take a look at the *Symbols in math mode* section of this  [cheat sheet](https://users.dickinson.edu/~richesod/latex/latexcheatsheet.pdf)  (or do some extra Googling---there are *many* resources).



# Formatting

## Tabbed subsections {.tabset}

Each subsection below the "Tabbed subsections" section heading will appear in a tab. See R Markdown Cookbook [Section 7.6: Put content in tabs](https://bookdown.org/yihui/rmarkdown-cookbook/html-tabs.html) for additional customization options. 

### Bulleted list

You can make a bulleted list like this:

* item 1
* item 2
* item 3


### Numbered list


You can make a numbered list like this

1. First thing I want to say
2. Second thing I want to say
3. Third thing I want to say



## Column formatting

<!-- Begin columns environment -->
:::::: {style="display: flex; font-size: large;"}

<!-- Create a column -->
::: {}
### Content Column 1

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse vel ipsum eu sem facilisis porttitor. Integer eu tristique lectus. Vestibulum nisi risus, porta sit amet cursus nec, auctor ac tellus. Integer egestas viverra rhoncus. Fusce id sem non ante vestibulum posuere ac sed lorem. Proin id felis a mi pellentesque viverra in at nulla. Duis augue nulla, aliquet ac ligula a, sagittis varius lorem.



:::

<!-- Create another column (this one is just adding horizontal space to separate content) -->
::: {}
<div class="horizontalgap" style="width:60px"></div>
:::

<!-- Create another column -->
::: {}

### Content Column 2

Aliquam non ante et erat luctus hendrerit eu ac justo. Fusce lacinia pulvinar neque non laoreet. Fusce vitae mauris pharetra, scelerisque purus eget, pharetra nisl. Aenean volutpat elementum tortor vitae rhoncus. Phasellus nec tellus euismod neque congue imperdiet tincidunt in mauris. Morbi eu lorem molestie, hendrerit lorem nec, semper massa. Sed vulputate hendrerit ex, eget cursus purus. Pellentesque consequat erat leo, eleifend porttitor lacus porta at. Vivamus faucibus quam ipsum, id condimentum ligula malesuada ultrices. Nullam luctus leo elit, vitae rutrum nibh venenatis eget. Nam at sodales purus. Proin nulla tellus, lacinia eget pretium sed, vehicula aliquet neque. Morbi vel eros elementum, suscipit elit eu, consequat libero. Nulla nec aliquet neque. Nunc bibendum sapien lectus, sed elementum nisi rutrum non. Ut vulputate at lacus eget maximus.

```{r}
#| out.width: 80%
#| fig.align: right
mtcars |>
  ggplot(aes(x = wt, y = mpg)) +
  geom_point()
```

:::
::::::
<!-- End columns environment with matching length indicator-->




# Customizing your blog design


As a *final* detail **only** if you have time, you can explore options for customizing the style of your blog. By default, we are using the `cosmo` theme from Bootswatch themes (see Line 7 of this file if you want to switch out themes). 


## Theme

There are 25 Bootswatch themes included with Quarto. You can change the theme easily by specifying one of these themes on Line 7: 

- default  
- cerulean  
- cosmo  
- cyborg  
- darkly  
- flatly  
- journal  
- litera  
- lumen  
- lux  
- materia  
- minty  
- morph  
- pulse  
- quartz  
- sandstone  
- simplex  
- sketchy  
- slate  
- solar  
- spacelab  
- superhero  
- united  
- vapor  
- yeti  
- zephyr

There are, I'm sure, many more similar packages with built in themes, or you can look into how to include a CSS code chunk to customize aspects of a theme.  

## Synax highlighting

You can also change the code chunk syntax highlighting option (Line 7, `highlight`): 

* `"default"`
* `"tango"`
* `"pygments"`
* `"kate"`
* `"monochrome"`
* `"espresso"`
* `"zenburn"`
* `"haddock"`
* `"textmate"` 
* `NULL` for no syntax highlighting (not recommended)

## Font size, type, and other customization

Further customization requires adding a CSS style file or code chunk or incorporating other development options. Further customization should be your lowest and final priority for the project. Ensure your content is fully prepared first.


# References

All data sources, any key R packages, and any other sources used in developing your blog should be cited in full in a list of references at the end of your blog. Your blog post should also link to these sources as they are discussed. You may choose any reference style as long as sources are fully cited (try to be consistent!).

Typically, references in R Markdown (and LaTeX) files are [incorporated with a BibTeX database](https://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html) (a .bib file). You can try this approach or manually include either a numbered or alphabetized list. 

Columbia University has compiled some guidance on [how to cite data](https://guides.library.columbia.edu/datacitation). Some data sources will give you the citation information to copy and paste. Use the provided citations or citation styles in those cases.

You can list R package citations with the code `citation("packageName")` in the console and then copy (and reformat as needed) the relevant text, e.g.,
```{r}
citation("DT")
```

The following citations are based on the American Statistical Association citation style (not all of these references are used in this document).:


<!-- Textbook -->
Baumer, B. S., Kaplan, D. T., and Horton, N. J. (2021), *Modern Data Science with R* (2nd ed.), Boca Raton, FL: CRC Press.

<!-- Journal article -->
Broman, K. W. and Woo, K. H. (2018), "Data Organization in Spreadsheets," *The American Statistician*, 72:1, 2-10, doi: [10.1080/00031305.2017.1375989](https://doi.org/10.1080/00031305.2017.1375989)

<!-- Website -->
Columbia University Libraries (n.d.), "Data Citation," available at <https://guides.library.columbia.edu/datacitation>.

<!-- Journal article -->
McNamara, A. and Horton N. J. (2018) "Wrangling Categorical Data in R," *The American Statistician*, 72:1, 97-104, doi: [10.1080/00031305.2017.1356375](https://doi.org/10.1080/00031305.2017.1356375).

<!-- Dataset -->
Shah, Syed A. A. (October 2022), "Starbucks Drinks" (Version 1), *Kaggle*, available at <https://www.kaggle.com/datasets/syedasimalishah/starbucks-drinks>.

<!-- R package -->
Xie Y, Cheng J, Tan X (2022). "DT: A Wrapper of the JavaScript Library 'DataTables'," R package version 0.24, available at <https://CRAN.R-project.org/package=DT>.
  


 


